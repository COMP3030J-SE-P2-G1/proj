<div class="size-full flex flex-col p-3">
    <header class="flex flex-col items-center mt-4">
        <div class="flex">
            <h1 class="text-3xl font-bold text-base-content">API Keys</h1>
            <div class="dropdown dropdown-end">
                <div tabindex="0" role="button" class="btn btn-circle btn-ghost btn-xs text-info">
                    <svg tabindex="0" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                        class="w-4 h-4 stroke-current">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                </div>
                <div tabindex="0" class="card compact dropdown-content z-[1] shadow bg-base-100 rounded-box w-96">
                    <div tabindex="0" class="card-body">
                        <p>
                            As an owner of this project, you can view and manage all SolarScape API keys associated with
                            it. Please do not share your API key with others or expose it in the browser or other
                            client-side code. To protect the security of your account, SolarScape may also automatically
                            disable any API key that has been publicly leaked.
                        </p>
                    </div>
                </div>
            </div>
        </div>
        <span class="text-base-content-shadow mt-2">Project API keys have replaced user API keys.</span>
        <span class="text-base-content-shadow">We recommend using project-based API keys for more granular control over your resources.</span>
    </header>
    <section class="m-2">
        <div class="max-w-screen-lg mx-auto p-5">
            <div class="flex flex-col items-center mt-8">
                <svg xmlns="http://www.w3.org/2000/svg" class="w-7 h-7" viewBox="0 0 256 256"><path fill="currentColor" d="M208 80h-32V56a48 48 0 0 0-96 0v24H48a16 16 0 0 0-16 16v112a16 16 0 0 0 16 16h160a16 16 0 0 0 16-16V96a16 16 0 0 0-16-16m-72 78.63V184a8 8 0 0 1-16 0v-25.37a24 24 0 1 1 16 0M160 80H96V56a32 32 0 0 1 64 0Z"/></svg>
            </div>
            <div class="flex flex-col items-center mt-8">
                <p class="text-center mb-4">
                    Create an API key to access the SolarScape API
                </p>
                <button class="btn" onclick="my_modal_4.showModal()">Create new secret key</button>
            </div>
            <dialog id="my_modal_4" class="modal">
                <div class="modal-box justify-center">
                    <h2 class="font-bold text-center text-lg">Create new secret key</h2>
                    <div id="alert" role="alert" class="alert alert-error hidden">
                        <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        <span>Error! Key name already exists. Please choose a different name.</span>
                    </div>
                    <div class="modal-action justify-center">
                        <input type="text" placeholder="Enter the Name of Key" id="keyNameInput" class="input input-bordered w-full max-w-xs"/>
                    </div>
                    <div class="modal-action justify-center">
                        <button class="btn" onclick="my_modal_4.close()">Close</button>
                        <button id="createKeyButton" class="btn bg-emerald-400">Create secret key</button>
                    </div>
                </div>
            </dialog>
            <dialog id="secretKeyModal" class="modal">
                <div class="modal-box w-1/5 max-w-5xl">
                    <h2 class="font-bold text-lg justify-center">Generated Secret Key</h2>
                    <p class="py-4 justify-center" id="secretKeyDisplay"></p>
                    <br>
                    <button class="btn" onclick="secretKeyModal.close()">Close</button>
                </div>
            </dialog>
            <div class="overflow-x-auto mt-4">
                <table class="table">
                    <thead>
                        <tr>
                            <th></th>
                            <th>Name</th>
                            <th>SECRET KEY</th>
                            <th>CREATED</th>
                            <th>LAST USED</th>
                            <th>PERMISSIONS</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody id="keyTableBody">
                        <tr>
                            <th>1</th>
                            <td>Test</td>
                            <td>F3H******LS12</td>
                            <td>2024/5/8</td>
                            <td>Never</td>
                            <td>
                                <label class="swap">
                                    <input type="checkbox"/>
                                    <div class="swap-on">ON</div>
                                    <div class="swap-off">OFF</div>
                                </label>
                            </td>
                            <td>
                                <button>
                                    <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 12 12">
                                        <path fill="currentColor" d="M5 3h2a1 1 0 0 0-2 0M4 3a2 2 0 1 1 4 0h2.5a.5.5 0 0 1 0
                                            1h-.441l-.443 5.17A2 2 0 0 1 7.623 11H4.377a2 2 0 0 1-1.993-1.83L1.941 4H1.5a.5.5 0 0 1
                                            0-1zm3.5 3a.5.5 0 0 0-1 0v2a.5.5 0 0 0 1 0zM5 5.5a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0V6a.5.5
                                            0 0 1 .5-.5M3.38 9.085a1 1 0 0 0 .997.915h3.246a1 1 0 0 0 .996-.915L9.055 4h-6.11z"/>
                                    </svg>
                                </button>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </section>
</div>

<script>
    const createKeyButton = document.querySelector('#createKeyButton');
    const keyTableBody = document.querySelector('#keyTableBody');
    const keyNameInput = document.querySelector('#keyNameInput');
    const alertBox = document.getElementById('alert');
    let rowCounter = 2;

    createKeyButton.addEventListener('click', function(event) {
        const dialogElm = document.getElementById("my_modal_4");

        const keyName = keyNameInput.value.trim();
        if (isKeyNameDuplicate(keyName)) {
            alertBox.classList.remove('hidden');
            return;
        }

        alertBox.classList.add('hidden');

        const newRow = document.createElement('tr');

        const serialCell = document.createElement('td');
        serialCell.textContent = rowCounter++;
        newRow.appendChild(serialCell);

        const nameCell = document.createElement('td');
        nameCell.textContent = keyName;
        newRow.appendChild(nameCell);

        const secretKeyCell = document.createElement('td');
        const secretKey = generateSecretKey();
        secretKeyCell.textContent = maskSecretKey(secretKey);
        newRow.appendChild(secretKeyCell);

        const createdCell = document.createElement('td');
        const createdDate = new Date().toLocaleDateString();
        createdCell.textContent = createdDate;
        newRow.appendChild(createdCell);

        const lastUsedCell = document.createElement('td');
        lastUsedCell.textContent = 'Never';
        newRow.appendChild(lastUsedCell);

        const permissionsCell = document.createElement('td');
        permissionsCell.innerHTML = `
            <label class="swap">
                <input type="checkbox"/>
                <div class="swap-on">ON</div>
                <div class="swap-off">OFF</div>
            </label>
        `;
        newRow.appendChild(permissionsCell);

        const deleteButtonCell = document.createElement('td');
        const deleteButton = document.createElement('button');
        deleteButton.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 12 12">
            <path fill="currentColor" d="M5 3h2a1 1 0 0 0-2 0M4 3a2 2 0 1 1 4 0h2.5a.5.5 0 0 1 0
                1h-.441l-.443 5.17A2 2 0 0 1 7.623 11H4.377a2 2 0 0 1-1.993-1.83L1.941 4H1.5a.5.5 0 0 1
                0-1zm3.5 3a.5.5 0 0 0-1 0v2a.5.5 0 0 0 1 0zM5 5.5a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0V6a.5.5
                0 0 1 .5-.5M3.38 9.085a1 1 0 0 0 .997.915h3.246a1 1 0 0 0 .996-.915L9.055 4h-6.11z"/>
        </svg>`;
        deleteButton.addEventListener('click', function() {
            newRow.remove();
        });
        deleteButtonCell.appendChild(deleteButton);
        newRow.appendChild(deleteButtonCell);

        keyTableBody.appendChild(newRow);

        closeDialog(dialogElm);

        const secretKeyModal = document.querySelector('#secretKeyModal');
        secretKeyModal.showModal();

        const secretKeyDisplay = document.querySelector('#secretKeyDisplay');
        secretKeyDisplay.textContent = secretKey;
    });

    function closeDialog(dialogElm) {
        if (dialogElm !== null && dialogElm.open) {
            dialogElm.close();
        }
    }

    function generateSecretKey() {
        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_';
        const length = 13;
        let secretKey = '';
        for (let i = 0; i < length; i++) {
            secretKey += characters.charAt(Math.floor(Math.random() * characters.length));
        }
        return secretKey;
    }

    function maskSecretKey(secretKey) {
        const visibleLength = Math.min(4, secretKey.length);
        const visiblePartStart = secretKey.substring(0, 3);
        const visiblePartEnd = secretKey.substring(secretKey.length - 4);
        const maskedPart = '*'.repeat(secretKey.length - 7);
        return visiblePartStart + maskedPart + visiblePartEnd;
    }

    function isKeyNameDuplicate(keyName) {
        const keyNames = Array.from(keyTableBody.querySelectorAll('tr td:first-child + td')).map(td => td.textContent);
        return keyNames.includes(keyName);
    }
</script>
