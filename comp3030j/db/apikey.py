from datetime import datetime
from sqlalchemy_utc import UtcDateTime, utcnow
from . import db
from sqlalchemy import ForeignKey
from sqlalchemy.orm import Mapped, mapped_column, relationship
from sqlalchemy_serializer import SerializerMixin
from uuid import uuid4


class ApiKey(db.Model, SerializerMixin):
    __tablename__ = "api_key"

    # Exclude ORM relationships
    serialize_rules = ("-user",)

    id: Mapped[int] = mapped_column(primary_key=True, autoincrement=True)
    user_id: Mapped[int] = mapped_column(ForeignKey("user.id"))
    user: Mapped["User"] = relationship(back_populates="apikeys")
    token: Mapped[str] = mapped_column(unique=True, index=True)
    desc: Mapped[str] = mapped_column(nullable=True)
    enabled: Mapped[bool] = mapped_column()
    # FIXME
    # /home/meowking/proj/class_proj/COMP3030J-SE-P2-G1/proj/comp3030j/db/apikey.py:48: SAWarning: Class utcnow will not make use of SQL compilation caching as it does not set the 'inherit_cache' attribute to ``True``.  This can have significant performance implications including some performance degradations in comparison to prior SQLAlchemy versions.  Set this attribute to True if this object can make use of the cache key generated by the superclass.  Alternatively, this attribute may be set to False which will disable this warning. (Background on this warning at: https://sqlalche.me/e/20/cprf)
    created_time: Mapped[datetime] = mapped_column(UtcDateTime(), default=utcnow())
    last_used_time: Mapped[datetime] = mapped_column(UtcDateTime(), nullable=True)

    def __init__(self, user_id, desc: str | None = None, token=None):
        self.user_id = user_id
        self.token = token or uuid4().hex
        self.desc = desc
        self.enabled = True

    def set_enabled(self, enabled: bool):
        self.enabled = enabled
        self.save_to_db()

    def update_last_used_time(self):
        self.last_used_time = utcnow()
        self.save_to_db()

    @classmethod
    def find_by_token(cls, token: str):
        return cls.query.filter_by(token=token).first()

    @classmethod
    def find_by_id(cls, id: int):
        return cls.query.filter_by(id=id).first()

    def save_to_db(self):
        db.session.add(self)
        db.session.commit()

    def delete_from_db(self):
        db.session.delete(self)
        db.session.commit()

